<?php

namespace {{ namespace }};

use {{ rootNamespace }}Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Traits\AttachTranslates;
use App\Traits\Sluggable;
use Illuminate\Support\Facades\DB;

class {{ class }} extends Controller
{
    use AttachTranslates, Sluggable;

    const VIEW_PATH = "admin.bundles.";

    protected $model;

    protected $ur = [
        //
    ];

    public function __construct()
    {
        // Set Your Model Here 
        $this->model = ?;
    }


    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(): Illuminate\Http\Response
    {
        if (!auth()->user()->hasAnyPermission($this->ur)) {
            return abort(404);
        }

        $records = $this->model->paginate(10);
        return view(self::VIEW_PATH . 'index', compact('records'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(): Illuminate\Http\Response
    {
        if (!auth()->user()->hasAnyPermission()) {
            return abort(404);
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request): Illuminate\Http\Response
    {
        try {
            if (!auth()->user()->hasAnyPermission()) {
                return abort(404);
            }
            DB::beginTransaction();
            
            $record = $this->model->create($request->validate());

            DB::commit();
            return response()->json(['type' => 'success', 'message' => __('messages.created_successfully'), 'redirect' => route('products.index'), 'slug' => config('app.url') . '/product/' . $product->slug]);
        } catch (\Exception $ex) {
            DB::rollback();
            return response()->json(['type' => 'error', 'message' => __('messages.internal_server_error')]);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function show(int $id): Illuminate\Http\Response
    {
        $record = $this->model->where('id', $id)->first();
        if (!$record || !auth()->user()->hasAnyPermission($this->url)) {
            return abort(404);
        }
        
        return view(self::VIEW_PATH . 'show', compact('record'));
        
        if (!$record) {
            return abort(404);
        }

        return view(self::VIEW_PATH . 'show', compact('record'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function edit(int $id): Illuminate\Http\Response
    {
        $record = $this->model->find($id);
        if (!$record || !auth()->user()->hasAnyPermission()) {
            return abort(404);
        }

        return view(self::VIEW_PATH . 'edit', compact('record'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, int $id): Illuminate\Http\Response
    {
        try {
            $record = $this->model->find($id);
            if (!$record || !auth()->user()->hasAnyPermission()) {
                return abort(404);
            }

            DB::beginTransaction();
            
            $new_record = $this->model->update($request->validate());
            
            DB::commit();
            return response()->json(['type' => 'success', 'message' => __('messages.updated_successfully')]);
        } catch (\Exception $ex) {
            DB::rollback();
            return response()->json(['type' => 'error', 'message' => __('messages.internal_server_error')]);
        }

    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int  $id
     * @return \Illuminate\Http\Response
     */
    public function destroy(int $id): Illuminate\Http\Response
    {
        $record = $this->model->findOrFail($id);
        if (!$record || !auth()->user()->hasAnyPermission()) {
            return abort(404);
        }
        
        $record->delete();
        return redirect()->back()->with('deleted_successfully', 'Delete Successfully');
    }
}
