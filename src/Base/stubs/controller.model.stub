<?php

declare(strict_types=1);

namespace {{ namespace }};

use {{ namespacedModel }};
use {{ rootNamespace }}Http\Controllers\Controller;
use {{ namespacedRequests }}
use App\Traits\AttachTranslates;
use App\Traits\Sluggable;

class {{ class }} extends Controller
{
    use AttachTranslates, Sluggable;

    const VIEW_PATH = "admin.bundles.";

    protected $model;

    public $ur = [
        //
    ];

    public function __construct()
    {
        // Set Your Model Here 
        $this->model = ?;
    }

    /**
     * Display a listing of the resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function index(): Illuminate\Http\Response
    {
        if (!auth()->user()->hasAnyPermission($this->ur)) {
            return abort(404);
        }

        //

        return view(self::VIEW_PATH . 'index', compact('records'));
    }

    /**
     * Show the form for creating a new resource.
     *
     * @return \Illuminate\Http\Response
     */
    public function create(): Illuminate\Http\Response
    {
        if (!auth()->user()->hasAnyPermission([$this->ur[0], $this->ur[4]])) {
            return abort(404);
        }
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \{{ namespacedStoreRequest }}  $request
     * @return \Illuminate\Http\Response
     */
    public function store({{ storeRequest }} $request): Illuminate\Http\Response
    {
        try {
            if (!auth()->user()->hasAnyPermission($this->url)) {
                return abort(404);
            }
            DB::beginTransaction();

            $record = $this->model->create($request->validate());
            //

            DB::commit();
            return response()->json(['type' => 'success', 'message' => __('messages.created_successfully'), 'redirect' => route('products.index'), 'slug' => config('app.url') . '/product/' . $product->slug]);
        } catch (\Exception $ex) {
            DB::rollback();
            return response()->json(['type' => 'error', 'message' => __('messages.internal_server_error')]);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Http\Response
     */
    public function show({{ model }} ${{ modelVariable }}): Illuminate\Http\Response
    {
        if (!auth()->user()->hasAnyPermission($this->url)) {
            return abort(404);
        }
        
        $record = $this->model->where('id', $id)->first();
        
        if (!$record) {
            return abort(404);
        }

        return view(self::VIEW_PATH . 'show', compact('record'));
    }

    /**
     * Show the form for editing the specified resource.
     *
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Http\Response
     */
    public function edit({{ model }} ${{ modelVariable }}): Illuminate\Http\Response
    {
        $record = $this->model->find($id);
        if (!$record || !auth()->user()->hasAnyPermission()) {
            return abort(404);
        }

        return view(self::VIEW_PATH . 'edit', compact('record'));
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \{{ namespacedUpdateRequest }}  $request
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Http\Response
     */
    public function update({{ updateRequest }} $request, {{ model }} ${{ modelVariable }}): Illuminate\Http\Response
    {
        try {
            $record = $this->model->find($id);
            if (!$record || !auth()->user()->hasAnyPermission()) {
                return abort(404);
            }

            DB::beginTransaction();
            
            $new_record = $this->model->update($request->validate());
            
            DB::commit();
            return response()->json(['type' => 'success', 'message' => __('messages.updated_successfully')]);
        } catch (\Exception $ex) {
            DB::rollback();
            return response()->json(['type' => 'error', 'message' => __('messages.internal_server_error')]);
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  \{{ namespacedModel }}  ${{ modelVariable }}
     * @return \Illuminate\Http\Response
     */
    public function destroy({{ model }} ${{ modelVariable }}): Illuminate\Http\Response
    {
         if (!auth()->user()->hasAnyPermission([])) {
            return abort(404);
        }
        $record = $this->model->findOrFail($id);
        $record->delete();
        return redirect()->back()->with('deleted_successfully', 'Delete Successfully');
    }
}
